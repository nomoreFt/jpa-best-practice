package jpa.practice.relationship.jpql_basic_function.entity;

import jakarta.persistence.*;
import jpa.practice.relationship.jpql_basic_function.entity.collection.Book;
import jpa.practice.relationship.onetoone.entity.Member;
import lombok.Builder;
import lombok.Getter;

import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * [Hibernate]
 *     create table employee (
 *         salary float(53) not null,
 *         start_date date,
 *         start_time time(6),
 *         status integer not null,
 *         id bigint generated by default as identity,
 *         start_date_time timestamp(6),
 *         start_instant timestamp(6) with time zone,
 *         first_name varchar(255),
 *         gender varchar(255) check (gender in ('MALE','FEMALE')),
 *         last_name varchar(255),
 *         primary key (id)
 *     )
 */
@Getter
@Entity
public class Employee {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String firstName;
    private String lastName;

    // Date, Time, Timestamp 필드
    private LocalDate startDate;//startDate=2021-01-01
    private LocalTime startTime;//startTime=09:00
    private LocalDateTime startDateTime;//startDateTime=2021-01-01T09:00
    private Instant startInstant;//startInstant=2021-01-01T00:00:00Z

    // Salary 및 기타 필드
    private double salary;

    // Enum 필드 예제
    @Enumerated(EnumType.STRING)
    private Gender gender;

    // Status를 나타내는 정수형 필드
    private int status;

    @ElementCollection
    @CollectionTable(name = "employee_favorite_books", joinColumns = @JoinColumn(name = "employee_id"))
    @Column(name = "favorite_book")
    @OrderColumn(name = "book_order")
    private List<Book> favoriteBooks = new ArrayList<>();

    @ElementCollection
    @CollectionTable(
            name = "employee_courses",
            joinColumns = @JoinColumn(name = "employee_id")
    )
    @MapKeyColumn
    @Column(name = "course_name")
    private Map<String, String> courses = new HashMap<>();
    // 기본 생성자
    protected Employee() {}

    // 생성자
    @Builder
    public Employee(String firstName, String lastName, LocalDate startDate, LocalTime startTime,
                    LocalDateTime startDateTime, Instant startInstant, double salary,
                    Gender gender, int status) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.startDate = startDate;
        this.startTime = startTime;
        this.startDateTime = startDateTime;
        this.startInstant = startInstant;
        this.salary = salary;
        this.gender = gender;
        this.status = status;
    }

    //helper method
    public void addFavoriteBook(Book book) {
        favoriteBooks.add(book);
    }

    public void addCourse(String courseName, String courseDescription) {
        courses.put(courseName, courseDescription);
    }


    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (this == obj) return true;
        if(!(obj instanceof Member other)) return false;

        return id != null && id.equals(other.getId());
    }

    @Override
    public int hashCode() {
        return getClass().hashCode();
    }

    @Override
    public String toString() {
        return "Employee{" + "id=" + id + ", firstName=" + firstName + ", lastName=" + lastName + ", startDate=" + startDate + ", startTime=" + startTime + ", startDateTime=" + startDateTime + ", startInstant=" + startInstant + ", salary=" + salary ;
    }

}